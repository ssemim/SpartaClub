"""
어떤 국가에서는 자국 내 방송국에서 스파이가 활동하는 사실을 알아냈다.
스파이는 영상물에 암호 코드를 삽입하여 송출하고 있었는데, 스파이의 암호 코드에 다음과 같은 규칙이 있음을 발견했다.
1. 암호코드는 8개의 숫자로 이루어져 있다.
2. 암호코드에서의 숫자 하나는 7개의 비트로 암호화되어 주어진다. 따라서 암호코드의 가로 길이는 56이다.
   ※ 길이가 56가 아닌 코드는 주어지지 않는다. 주어진 암호코드는 주어진 규칙대로 해독할 수 있음을 보장한다.
      암호코드의 각 숫자가 암호화되는 규칙은 주어진 그림1을 참고하라.
3. 올바른 암호코드는 (홀수 자리의 합 x 3) + (짝수 자리의 합)이 10의 배수가 되어야 한다.
    ex) 암호코드가 88012346일 경우,
    ( ( 8 + 0 + 2 + 4 ) x 3 ) + ( 8 + 1 + 3 + 6) = 60은 10의 배수이므로 올바른 암호코드다.
    ex) 암호코드가 19960409일 경우,
    ( ( 1 + 9 + 0 + 0 ) x 3 ) + ( 9 + 6 + 4 + 9) = 58은 10의 배수가 아니므로 잘못된 암호코드다.
이 암호코드들을 빠르고 정확하게 인식할 수 있는 스캐너를 개발하려고 한다.
스캐너는 암호코드 1개가 포함된 직사각형 배열을 읽는다.
직사각형 배열은 1, 0으로만 이루어져 있고, 암호코드 이외의 부분은 전부 0으로 주어진다.
암호코드 정보가 포함된 2차원 배열을 입력으로 받아 올바른 암호코드인지 판별하는 프로그램을 작성하라.

"""

T = int(input())  # 테스트 케이스 받고

code_table = {  # 한줄 한 줄 먼뜻인지 받아오고
    "0001101": 0,
    "0011001": 1,
    "0010011": 2,
    "0111101": 3,
    "0100011": 4,
    "0110001": 5,
    "0101111": 6,
    "0111011": 7,
    "0110111": 8,
    "0001011": 9,
}


def find_code(matrix, N, M):  # 코드 찾기 함수
    for i in range(N):
        # j는 열 번호인데 뒤에서부터 1 찾기 시작
        # 왜 1을 찾느냐?? 모든 암호코드는 다 1로 끝난다
        # 0으로 시작하는것도 당연하긴한데 0이 암호코드에 포함되는지아닌지확인
        for j in range(M - 1, 55, -1):  # 마지막 인덱스부터, 암호자리 56자리, 거꾸로 돌겠다
            if matrix[i][j] == "1":
                # 암호코드가 끝나는 위치 j를 발견했으니까
                # [j-55 : j+1]가 암호코드 후보 범위 / 000000들 모여있는데는 볼 필요가 없으니까
                code = matrix[i][j - 55:j + 1]

                # code 를 앞에서부터 7개씩 잘라서 code_table에 일치하는 코드가 있는지 확인
                digits = []  # 숫자들 집어널을 배열 만들고
                for k in range(0, 56, 7):  # 0번부터 56번까지 7개씩
                    bit = code[k:k + 7]  # 7비트 추출
                    if bit in code_table:
                        digits.append(code_table[bit])  # 딕셔너리니까 숫자로 바까서 집어넣
                    else:
                        return 0  # 혹시 테이블에 없는 코드면 잘못된거라 0 뱉 (문제에서 시킴 1)

                # 올바른지 체크 : 홀수 자리 합 *3 + 짝수 자리 합
                odd_sum = digits[0] + digits[2] + digits[4] + digits[6]
                even_sum = digits[1] + digits[3] + digits[5] + digits[7]
                total = odd_sum * 3 + even_sum

                if total % 10 == 0:  # 10의 배수면 올바른 코드
                    return sum(digits)  # 숫자의 합 반환
                else:
                    return 0  # 잘못된 코드 (문제에서 시킴 2)

    return 0  # 1 없어도 잘못 (문제에서 시킴 3)


# 완성

# 테. 케 돌면서
for tc in range(1, T + 1):
    N, M = map(int, input().split())  # 배열 세로 N, 가로 M 입력
    matrix = [input() for _ in range(N)]  # N줄의 0/1 문자열 입력

    # 함수 호출해서 집어넣
    result = find_code(matrix, N, M)

    # 뱉
    print(f"#{tc} {result}")
