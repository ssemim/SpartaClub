"""
A도시는 전기버스를 운행하려고 한다.
전기버스는 한번 충전으로 이동할 수 있는 정류장 수가 정해져 있어서,
중간에 충전기가 설치된 정류장을 만들기로 했다.

버스는 0번에서 출발해 종점인 N번 정류장까지 이동하고,
한번 충전으로 최대한 이동할 수 있는 정류장 수 K가 정해져 있다.

충전기가 설치된 M개의 정류장 번호가 주어질 때,
최소한 몇 번의 충전을 해야 종점에 도착할 수 있는지 출력하는 프로그램을 만드시오.

만약 충전기 설치가 잘못되어 종점에 도착할 수 없는 경우는 0을 출력한다.
출발지에는 항상 충전기가 설치되어 있지만 충전횟수에는 포함하지 않는다.
"""

# 죽지도 않고 돌아왔구나 전기버스

# 그니까 갈 수 있나? 없나를 단순하게 반환하면 됌
# 뭐나면, 주어진 최대거리만큼 가보고,
# 기름 없으면 그거보다 1칸씩 줄여서 다시 츄라이하는 식으로
# 야 빽해 빽

T = int(input())  # 테스트 케이스 받고

for test_case in range(1, T + 1):  # 테스트 케이스 돌면서

    K, N, M = map(int, input().split())
    # K = 한 번 충전으로 최대한 이동할 수 있는 정류장 수
    # N = 종점 정류장 번호
    # M = 충전기 붙어있는 정류장 번호

    # 그리고, 도착점에 도착할 수 없는 경우에는 0을 뱉어야해

    gas_station = list(map(int, input().split()))
    # 충전기 있는 정류장 받아주공 (가스 아니고 전기지만 일렉트릭머시기쓰기싫)

    # 0번 출발지 부터 종점 정류장 번호까지 쭉 진행하면서
    # 가장 진행방향에 가까운 끝쪽 인덱스가 가스 충전소 번호 배열 안에 존재한다면?
    # 최소의 충전을 하고 진행 할 수 있음
    # 그리고 만약 그 범위 안에 충전소 번호가 없다면 0을 반환하고 끝 OK?

    gas_station.append(N)  # 종점도 가야 하니까 충전소에 추가
    current = 0  # 현재 위치
    charge = 0  # 충전 횟수
    idx = 0  # 충전소 리스트 인덱스

    while current < N:  # 아직 종점 못 갔으면
        last = current  # 출발 위치(마지막 충전한 위치) 저장
        # 지금 있는데서 K만큼 이동 가능한 범위 안에 있는 충전소 중에서 젤 먼거 찾음
        while idx < len(gas_station) and gas_station[idx] - current <= K:
            idx += 1  # 조건 만족했으니까 다음 충전소로
        # 이동할 수 있는 충전소없으면
        # 그니까 idx-1이 지금 위치랑 같으면 (오도가도몬함)
        if current == gas_station[idx - 1] if idx > 0 else last:
            charge = 0  # 0뱉 (문제에서 시킴)
            break  # ㅈㅔ낌
        # 맨 뒤쪽에 있는 충전소로 가
        current = gas_station[idx - 1]
        if current < N:  # 종점에 도달하지 않았으면 충전또 해
            charge += 1  # 충전 횟수 1 증가

    print(f'#{test_case} {charge}')
